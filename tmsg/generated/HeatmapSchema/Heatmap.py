# automatically generated by the FlatBuffers compiler, do not modify

# namespace: HeatmapSchema

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Heatmap(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Heatmap()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsHeatmap(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Heatmap
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Heatmap
    def Batch(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Heatmap
    def Width(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Heatmap
    def Height(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Heatmap
    def Channels(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Heatmap
    def Data(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Heatmap
    def DataAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Heatmap
    def DataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Heatmap
    def DataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # Heatmap
    def Min(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Heatmap
    def Max(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Heatmap
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def HeatmapStart(builder): builder.StartObject(8)
def Start(builder):
    return HeatmapStart(builder)
def HeatmapAddBatch(builder, batch): builder.PrependInt32Slot(0, batch, 0)
def AddBatch(builder, batch):
    return HeatmapAddBatch(builder, batch)
def HeatmapAddWidth(builder, width): builder.PrependInt32Slot(1, width, 0)
def AddWidth(builder, width):
    return HeatmapAddWidth(builder, width)
def HeatmapAddHeight(builder, height): builder.PrependInt32Slot(2, height, 0)
def AddHeight(builder, height):
    return HeatmapAddHeight(builder, height)
def HeatmapAddChannels(builder, channels): builder.PrependInt32Slot(3, channels, 0)
def AddChannels(builder, channels):
    return HeatmapAddChannels(builder, channels)
def HeatmapAddData(builder, data): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)
def AddData(builder, data):
    return HeatmapAddData(builder, data)
def HeatmapStartDataVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartDataVector(builder, numElems):
    return HeatmapStartDataVector(builder, numElems)
def HeatmapAddMin(builder, min): builder.PrependFloat32Slot(5, min, 0.0)
def AddMin(builder, min):
    return HeatmapAddMin(builder, min)
def HeatmapAddMax(builder, max): builder.PrependFloat32Slot(6, max, 0.0)
def AddMax(builder, max):
    return HeatmapAddMax(builder, max)
def HeatmapAddType(builder, type): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)
def AddType(builder, type):
    return HeatmapAddType(builder, type)
def HeatmapEnd(builder): return builder.EndObject()
def End(builder):
    return HeatmapEnd(builder)